// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/scheduler/scheduler.proto

/*
Package scheduler is a generated protocol buffer package.

It is generated from these files:
	pkg/scheduler/scheduler.proto

It has these top-level messages:
	Schedule
	ScheduleRequest
	Action
	AbortAction
	InvokeTaskAction
	NotifyTaskAction
*/
package scheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import fission_workflows_types1 "github.com/fission/fission-workflows/pkg/types"
import fission_workflows_types "github.com/fission/fission-workflows/pkg/types/typedvalues"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ActionType contains all possible types of actions the scheduler can undertake.
//
// Each action can have a seperate datastructure defined here.
// Note about a RETURN/COMPLETE/FAIL action: The controller decides the final status of the workflow. In order to avoid
// inconsistencies in the replay.
type ActionType int32

const (
	// Invokes a task
	ActionType_INVOKE_TASK ActionType = 0
	// Abort cancels the invocation, leading to an ABORTED status.
	ActionType_ABORT ActionType = 1
	// Notify a task
	ActionType_NOTIFY_TASK ActionType = 2
)

var ActionType_name = map[int32]string{
	0: "INVOKE_TASK",
	1: "ABORT",
	2: "NOTIFY_TASK",
}
var ActionType_value = map[string]int32{
	"INVOKE_TASK": 0,
	"ABORT":       1,
	"NOTIFY_TASK": 2,
}

func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}
func (ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Schedule struct {
	InvocationId string                     `protobuf:"bytes,1,opt,name=invocationId" json:"invocationId,omitempty"`
	CreatedAt    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	Actions      []*Action                  `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
}

func (m *Schedule) Reset()                    { *m = Schedule{} }
func (m *Schedule) String() string            { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()               {}
func (*Schedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Schedule) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *Schedule) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Schedule) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type ScheduleRequest struct {
	Workflow   *fission_workflows_types1.Workflow           `protobuf:"bytes,1,opt,name=workflow" json:"workflow,omitempty"`
	Invocation *fission_workflows_types1.WorkflowInvocation `protobuf:"bytes,2,opt,name=invocation" json:"invocation,omitempty"`
}

func (m *ScheduleRequest) Reset()                    { *m = ScheduleRequest{} }
func (m *ScheduleRequest) String() string            { return proto.CompactTextString(m) }
func (*ScheduleRequest) ProtoMessage()               {}
func (*ScheduleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ScheduleRequest) GetWorkflow() *fission_workflows_types1.Workflow {
	if m != nil {
		return m.Workflow
	}
	return nil
}

func (m *ScheduleRequest) GetInvocation() *fission_workflows_types1.WorkflowInvocation {
	if m != nil {
		return m.Invocation
	}
	return nil
}

// Action is the generic container of an action (signalled by ActionType) and
// the relevant message as a payload.
type Action struct {
	Type    ActionType            `protobuf:"varint,1,opt,name=type,enum=fission.workflows.scheduler.ActionType" json:"type,omitempty"`
	Payload *google_protobuf1.Any `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Action) GetType() ActionType {
	if m != nil {
		return m.Type
	}
	return ActionType_INVOKE_TASK
}

func (m *Action) GetPayload() *google_protobuf1.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type AbortAction struct {
	Reason string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (m *AbortAction) Reset()                    { *m = AbortAction{} }
func (m *AbortAction) String() string            { return proto.CompactTextString(m) }
func (*AbortAction) ProtoMessage()               {}
func (*AbortAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AbortAction) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type InvokeTaskAction struct {
	// Id of the task in the workflow
	Id     string                                         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Inputs map[string]*fission_workflows_types.TypedValue `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InvokeTaskAction) Reset()                    { *m = InvokeTaskAction{} }
func (m *InvokeTaskAction) String() string            { return proto.CompactTextString(m) }
func (*InvokeTaskAction) ProtoMessage()               {}
func (*InvokeTaskAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InvokeTaskAction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InvokeTaskAction) GetInputs() map[string]*fission_workflows_types.TypedValue {
	if m != nil {
		return m.Inputs
	}
	return nil
}

type NotifyTaskAction struct {
	Id         string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ExpectedAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=expectedAt" json:"expectedAt,omitempty"`
}

func (m *NotifyTaskAction) Reset()                    { *m = NotifyTaskAction{} }
func (m *NotifyTaskAction) String() string            { return proto.CompactTextString(m) }
func (*NotifyTaskAction) ProtoMessage()               {}
func (*NotifyTaskAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NotifyTaskAction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotifyTaskAction) GetExpectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpectedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*Schedule)(nil), "fission.workflows.scheduler.Schedule")
	proto.RegisterType((*ScheduleRequest)(nil), "fission.workflows.scheduler.ScheduleRequest")
	proto.RegisterType((*Action)(nil), "fission.workflows.scheduler.Action")
	proto.RegisterType((*AbortAction)(nil), "fission.workflows.scheduler.AbortAction")
	proto.RegisterType((*InvokeTaskAction)(nil), "fission.workflows.scheduler.InvokeTaskAction")
	proto.RegisterType((*NotifyTaskAction)(nil), "fission.workflows.scheduler.NotifyTaskAction")
	proto.RegisterEnum("fission.workflows.scheduler.ActionType", ActionType_name, ActionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	Evaluate(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*Schedule, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Evaluate(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*Schedule, error) {
	out := new(Schedule)
	err := grpc.Invoke(ctx, "/fission.workflows.scheduler.Scheduler/evaluate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	Evaluate(context.Context, *ScheduleRequest) (*Schedule, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.scheduler.Scheduler/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Evaluate(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fission.workflows.scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "evaluate",
			Handler:    _Scheduler_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/scheduler/scheduler.proto",
}

func init() { proto.RegisterFile("pkg/scheduler/scheduler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x5d, 0xb2, 0xad, 0x6b, 0x6f, 0xd0, 0x56, 0x59, 0x08, 0x95, 0x22, 0x44, 0xc9, 0x34, 0x51,
	0xf1, 0xe1, 0x4a, 0xe5, 0x65, 0x2d, 0xe2, 0x21, 0x93, 0x86, 0x54, 0x15, 0xb5, 0xc2, 0x8b, 0x86,
	0xe0, 0x61, 0xc8, 0x4d, 0xdc, 0x2e, 0x6a, 0x1b, 0x87, 0xd8, 0xd9, 0xc8, 0x8f, 0xe1, 0x99, 0x5f,
	0xc4, 0xff, 0x41, 0x71, 0x9c, 0xb6, 0x2b, 0x50, 0x2a, 0x5e, 0x12, 0x7f, 0x9c, 0x73, 0x7c, 0xee,
	0xb9, 0x17, 0x1e, 0x47, 0xd3, 0x49, 0x4b, 0x78, 0xd7, 0xcc, 0x4f, 0x66, 0x2c, 0x5e, 0xae, 0x70,
	0x14, 0x73, 0xc9, 0xd1, 0xa3, 0x71, 0x20, 0x44, 0xc0, 0x43, 0x7c, 0xcb, 0xe3, 0xe9, 0x78, 0xc6,
	0x6f, 0x05, 0x5e, 0x40, 0xea, 0xdd, 0x49, 0x20, 0xaf, 0x93, 0x11, 0xf6, 0xf8, 0xbc, 0xa5, 0x71,
	0xc5, 0xff, 0xd5, 0x02, 0xdf, 0xca, 0x1e, 0x90, 0x69, 0xc4, 0x44, 0xfe, 0xcd, 0x85, 0xeb, 0xef,
	0xff, 0x83, 0xeb, 0xdf, 0xd0, 0x59, 0x72, 0x77, 0xad, 0xd5, 0x9e, 0x4c, 0x38, 0x9f, 0xcc, 0x58,
	0x4b, 0xed, 0x46, 0xc9, 0xb8, 0x25, 0x83, 0x39, 0x13, 0x92, 0xce, 0x23, 0x0d, 0x78, 0xb8, 0x0e,
	0xa0, 0x61, 0x9a, 0x5f, 0xd9, 0x3f, 0x0c, 0x28, 0x5f, 0xe8, 0x9a, 0x90, 0x0d, 0xf7, 0x82, 0xf0,
	0x86, 0x7b, 0x54, 0x06, 0x3c, 0xec, 0xf9, 0x35, 0xa3, 0x61, 0x34, 0x2b, 0xe4, 0xce, 0x19, 0x3a,
	0x85, 0x8a, 0x17, 0x33, 0x2a, 0x99, 0xef, 0xc8, 0x9a, 0xd9, 0x30, 0x9a, 0x56, 0xbb, 0x8e, 0x73,
	0x7d, 0x5c, 0xe8, 0x63, 0xb7, 0x30, 0x40, 0x96, 0x60, 0xf4, 0x16, 0x0e, 0xa8, 0x97, 0xa9, 0x88,
	0xda, 0x6e, 0x63, 0xb7, 0x69, 0xb5, 0x8f, 0xf1, 0x86, 0x7c, 0xb1, 0xa3, 0xb0, 0xa4, 0xe0, 0xd8,
	0xdf, 0x0d, 0x38, 0x2a, 0x9c, 0x12, 0xf6, 0x35, 0x61, 0x22, 0x93, 0x2c, 0x17, 0x54, 0x65, 0xd6,
	0x6a, 0x3f, 0xfd, 0x83, 0x66, 0x9e, 0xfc, 0x47, 0xbd, 0x27, 0x0b, 0x0a, 0xea, 0x03, 0x2c, 0x6b,
	0xd3, 0xc5, 0xbc, 0xf8, 0xa7, 0x40, 0x6f, 0x41, 0x21, 0x2b, 0x74, 0x3b, 0x81, 0x52, 0x6e, 0x19,
	0xbd, 0x81, 0xbd, 0x8c, 0xa1, 0x1c, 0x1d, 0xb6, 0x9f, 0x6d, 0x51, 0xa5, 0x9b, 0x46, 0x8c, 0x28,
	0x12, 0xc2, 0x70, 0x10, 0xd1, 0x74, 0xc6, 0xa9, 0x5f, 0xdb, 0x53, 0x86, 0xee, 0xff, 0x96, 0xae,
	0x13, 0xa6, 0xa4, 0x00, 0xd9, 0x27, 0x60, 0x39, 0x23, 0x1e, 0x4b, 0xfd, 0xf6, 0x03, 0x28, 0xc5,
	0x8c, 0x0a, 0x1e, 0xea, 0xe6, 0xe9, 0x9d, 0xfd, 0xd3, 0x80, 0x6a, 0x66, 0x7c, 0xca, 0x5c, 0x2a,
	0xa6, 0x1a, 0x7c, 0x08, 0x66, 0x50, 0x74, 0xd9, 0x0c, 0x7c, 0xf4, 0x01, 0x4a, 0x41, 0x18, 0x25,
	0x52, 0xd4, 0x4c, 0xd5, 0xa0, 0xce, 0x46, 0xeb, 0xeb, 0x72, 0xb8, 0xa7, 0xb8, 0xe7, 0xa1, 0x8c,
	0x53, 0xa2, 0x85, 0xea, 0x57, 0x60, 0xad, 0x1c, 0xa3, 0x2a, 0xec, 0x4e, 0x59, 0xaa, 0x9f, 0xcc,
	0x96, 0xa8, 0x03, 0xfb, 0x6a, 0x98, 0x75, 0xfc, 0xc7, 0x7f, 0x8d, 0x3f, 0xcb, 0xc8, 0xbf, 0xcc,
	0xa0, 0x24, 0x67, 0x74, 0xcd, 0x53, 0xc3, 0xbe, 0x82, 0xea, 0x80, 0xcb, 0x60, 0x9c, 0x6e, 0x28,
	0xab, 0x0b, 0xc0, 0xbe, 0x45, 0xcc, 0xdb, 0x76, 0x66, 0x57, 0xd0, 0xcf, 0x3b, 0x00, 0xcb, 0x16,
	0xa1, 0x23, 0xb0, 0x7a, 0x83, 0xcb, 0x61, 0xff, 0xfc, 0x8b, 0xeb, 0x5c, 0xf4, 0xab, 0x3b, 0xa8,
	0x02, 0xfb, 0xce, 0xd9, 0x90, 0xb8, 0x55, 0x23, 0xbb, 0x1b, 0x0c, 0xdd, 0xde, 0xbb, 0x4f, 0xf9,
	0x9d, 0xd9, 0x0e, 0xa1, 0x52, 0xcc, 0x6b, 0x8c, 0x28, 0x94, 0x59, 0xe6, 0x9a, 0x4a, 0x86, 0x5e,
	0x6e, 0x8c, 0x75, 0x6d, 0xc6, 0xeb, 0x27, 0x5b, 0xa1, 0xed, 0x9d, 0x33, 0xeb, 0x73, 0x65, 0x71,
	0x3e, 0x2a, 0xa9, 0xba, 0x5e, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xa5, 0xdf, 0x7d, 0xe2,
	0x04, 0x00, 0x00,
}
